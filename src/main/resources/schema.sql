CREATE TABLE IF NOT EXISTS roles (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name VARCHAR(50) NOT NULL,
    CONSTRAINT PK_ROLE PRIMARY KEY (id),
    CONSTRAINT UQ_ROLE_NAME UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS users (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    login VARCHAR(50) NOT NULL,
    email VARCHAR(255) NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    created_at TIMESTAMP NOT NULL,
    role_id INTEGER REFERENCES roles (id) ON DELETE CASCADE NOT NULL,
    CONSTRAINT PK_USER PRIMARY KEY (id),
    CONSTRAINT UQ_USER_EMAIL UNIQUE (email),
    CONSTRAINT UQ_USER_LOGIN UNIQUE (login)
);

CREATE TABLE IF NOT EXISTS user_profiles (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name VARCHAR(100),
    surname VARCHAR(100),
    age INTEGER,
    user_id INTEGER REFERENCES users (id) ON DELETE CASCADE NOT NULL,
    CONSTRAINT PK_USER_PROFILE PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS posts (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    heading VARCHAR(100) NOT NULL,
    text VARCHAR(255) NOT NULL,
    is_updated BOOLEAN NOT NULL,
    created_at TIMESTAMP NOT NULL,
    updated_at TIMESTAMP,
    user_id INTEGER REFERENCES users (id) ON DELETE CASCADE NOT NULL,
    CONSTRAINT PK_POST PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS posts_rates (
    user_id INTEGER REFERENCES users (id) ON DELETE CASCADE NOT NULL,
    post_id INTEGER REFERENCES posts (id) ON DELETE CASCADE NOT NULL,
    rate INTEGER NOT NULL,
    CONSTRAINT PK_POST_RATE PRIMARY KEY (user_id, post_id)
);

CREATE TABLE IF NOT EXISTS tags (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name VARCHAR(50) NOT NULL,
    CONSTRAINT PK_TAG PRIMARY KEY (id),
    CONSTRAINT UQ_TAG_NAME UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS posts_tags (
    post_id INTEGER REFERENCES posts (id) ON DELETE CASCADE NOT NULL,
    tag_id INTEGER REFERENCES tags (id) ON DELETE CASCADE NOT NULL,
    CONSTRAINT UQ_POST_TAG UNIQUE (post_id, tag_id)
);

CREATE TABLE IF NOT EXISTS comments (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    text VARCHAR(255) NOT NULL,
    created_at TIMESTAMP NOT NULL,
    post_id INTEGER REFERENCES posts (id) ON DELETE CASCADE NOT NULL,
    user_id INTEGER REFERENCES users (id) ON DELETE CASCADE NOT NULL,
    CONSTRAINT PK_COMMENT PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS comments_rates (
    user_id INTEGER REFERENCES users (id) ON DELETE CASCADE NOT NULL,
    comment_id INTEGER REFERENCES comments (id) ON DELETE CASCADE NOT NULL,
    rate INTEGER NOT NULL,
    CONSTRAINT PK_COMMENT_RATE PRIMARY KEY (user_id, comment_id)
);

CREATE TABLE IF NOT EXISTS ban_reasons (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    reason VARCHAR(50) NOT NULL,
    CONSTRAINT PK_BAN_REASON PRIMARY KEY (id),
    CONSTRAINT UQ_BAN_REASON UNIQUE (reason)
);

CREATE TABLE IF NOT EXISTS bans (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    ban_date TIMESTAMP NOT NULL,
    description VARCHAR(255) NOT NULL,
    is_active BOOLEAN NOT NULL,
    unban_date TIMESTAMP NOT NULL,
    user_id INTEGER REFERENCES users (id) ON DELETE CASCADE NOT NULL,
    ban_reason_id INTEGER REFERENCES ban_reasons (id) ON DELETE CASCADE NOT NULL,
    CONSTRAINT PK_BAN PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS event_types (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    type VARCHAR(50) NOT NULL,
    CONSTRAINT PK_EVENT_TYPE PRIMARY KEY (id),
    CONSTRAINT UQ_EVENT_TYPE UNIQUE (type)
);

CREATE TABLE IF NOT EXISTS events (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    created_at TIMESTAMP NOT NULL,
    user_id INTEGER REFERENCES users (id) ON DELETE CASCADE NOT NULL,
    event_type_id INTEGER REFERENCES event_types (id) ON DELETE CASCADE NOT NULL,
    CONSTRAINT PK_EVENT PRIMARY KEY (id)
);
